x$foo
x$bar
x$baz
x <- c(1,2,NA,4,NA,5)
bad <- is.na(x)
bad
x[!bad]
x[bad]
y <- matrix(rep(10,4),2,2)
y
R.version.string
install.packages("swirl")
find.package ("devtools")
install.packages("devtools")
library(devtools)
find_rtools()
?find.package
find.package("swirl")
library(swirl)
install_from_swirl("R Programming")
swirl()
5+7
x <- 5+7
x
y <- x-3
y
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
Z * 2 + 100
z * 2 + 100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z / my_sqrt
my_div
c(1, 2, 3, 4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
z * 2 + 1000
my_div
swirl()
getwd()
ls()
x <- 9
ls()
list.files()
dir()
?list.files
args(list.files)
old.dir <- getwd()
dir.create(testdir)
dir.create("testdir"")
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
dir()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R", "mytest2.R")
file.copy("mytest2.R", "mytest3.R")
file.path("mytest3.R")
file.path("folder1", "folder2", mytest3.R")
file.path("folder1", "folder2", "mytest3.R")
play()
?file.path
file.path("folder1", "folder2")
nxt()
file.path("folder1", "folder2")
?dir.create
play()
dir.create (c(filepath,"testdir2"))
dir.create (filepath(testdir2,"testdir3"))
dir.create (filepath("testdir2","testdir3"))
dir.create (file.path("testdir2","testdir3"))
file.path("testdir2", "testdir3")
dir.create(file.path("testdir2", "testdir3"), recursive = TRUE)
dir()
getwd()
nxt()
dir.create(file.path("testdir2", "testdir3"), recursive = TRUE)
dir.create(file.path("testdir2", "testdir3"), recursive = TRUE)
setwd()
setwd(old.dir)
swirl()
packageVersion("swirl")
library(swirl)
ls()
rm(list=ls())
swirl()
getwd()
ls()
x <- 9
ls()
dir()
?list.files
args(list.files)
old.dir <- getwd()
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
ls()
list.files()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R", "mytest2.R")
file.copy("mytest2.R", "mytest3.R")
file.path("mytest3.R")
filepath ("folder1", "folder2")
file.path ("folder1", "folder2")
?dir.create
dir.create(file.path("testdir2", "testdir3"), recursive = TRUE)
setwd(old.dir)
swirl()
swirl()
swirl()
library(swirl)
rm(list=ls())
swirl()
swirl()
library(swirl)
swirl()
1:20
pi:10
15:1
?`:`
seq(1, 20)
seq(0, 10, by=0.5)
seq(5, 10, length=30)
my_seq <- seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times=40)
rep(c(0, 1, 2), times = 10)
rep(c(0, 1, 2), each = 10)
swirl()
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char, "Niala")
my_name
paste(my_name, collapse = " ")
paste ("Hello", "world!", sep=" ")
paste(1:3, c("X", "Y", "Z"), sep="")
paste (LETTERS, 1:4, sep = "-")
library(swirl)
rm(list=ls())
swirl()
x <- c(44, NA, 5, NA)
x*3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
mt_data
my_data
0/0
Inf - Inf
1:20
pi:10
15:1
?`:`
seq (1, 20)
seq(0, 10, by=0.5)
my_seq <- seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0,1,2), times = 10)
rep(c(0,1,2), each = 10)
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("my", "name", "is")
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char, "Niala")
my_name
paste(my_name, collapse = " ")
paste ("Hello", "world", sep = " ")
paste("Hello", "world!", sep = " ")
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
library(swirl)
rm(list=ls())
swirl()
getwd()
ls()
x <- 9
ls()
list.files()
?list.files
arg(list.files())
args(list.files())
args(list.files)
old.dir <- getwd()
dir.create("testdir")
setwd(testdir)
play()
getwd()
dir()
setwd(testdir)
dir.create("testdir")
setwd(testdir)
setwd("testdir")
getwd()
nxt()
setwd("testdir")
play()
getwd()
setwd("C:/Users/rinnette/Documents")
getwd()
nxt
nxt()
setwd("testdir")
file.create("mytest.R")
list.files()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R", "mytest2.R")
file.copy("mytest2.R", "mytest3.R")
file.path("mytest3.R")
file.path("folder1", "folder2")
?dir.create
dir.create(file.path("testdir2", "testdir3"), recursive = TRUE)
setwd(old.dir)
x
x[1:10]
x[is.na()]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x > 0]
c(x[3], x[5], x[7])
play()
x[c(3,5,7)]
nxt()
x[c(3,5,7)]
x[0]
x[3000]
play()
x[-2]
nxt()
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo=11, bar = 2, norf = NA)
vect
names(vect)
c(11, 2, NA)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- c(1:20)
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
play()
class(vect)
class(x)
class(y)
nxt()
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(1:20, 4, 5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data)
colnames(my_data) <- cnames
my_data
(TRUE != FALSE) == !(6 == 7)
TRUE && FALSE || 9 >= 4 && 3 < 6
TRUE && 62 < 62 && 44 >= 44
FALSE || TRUE && FALSE
99.99 > 100 || 45 < 7.3 || 4 != 4.0
!(8 > 4) ||  5 == 5.0 && 7.8 >= 7.79
FALSE && 6 >= 6 || 7 >= 8 || 50 <= 49.5
6 >= -9 && !(6 > 7) && !(!TRUE)
FALSE || TRUE && 6 != 4 || 9 > 4
isTRUE(3)
!isTRUE(8 != 5)
isTRUE(NA)
isTRUE(!TRUE)
!isTRUE(4 < 3)
isTRUE(FALSE)
isTRUE(TRUE)
identical(5 > 4, 3 < 3.1)
xor(4 >= 9, 8 != 8.0)
xor(!!TRUE, !!FALSE)
xor(identical(xor, 'xor'), 7 == 7.0)
xor(!isTRUE(TRUE), 6 > -1)
ints <- sample(10)
ints
ints <= 2
which (ints <= 2)
any(ints == 10)
x <- c(1,2,3)
x[1]
x <- c(67,2,3)
x[1]
x[length(x)]
x <- c(67,2,107)
x[length(x)]
telegram <- function(...){
paste("START", ..., "STOP")
}
telegram ("Hello", "boy")
mad_libs <- function(...){
# Do your argument unpacking here!
args <- list(...)
place <- args[[place]]
adjective <- args[[adjective]]
noun <- args[[noun]]
# Don't modify any code below this comment.
# Notice the variables you'll need to create in order for the code below to
# be functional!
paste("News from", place, "today where", adjective, "students took to the streets in protest of the new", noun, "being installed on campus.")
}
mad_libs("Toco", "has", "cat")
mad_libs(place="Toco", adjective="has", noun="cat")
place
mad_libs <- function(...){
# Do your argument unpacking here!
args <- list(...)
place <- args[[place]]
adjective <- args[[adjective]]
noun <- args[[noun]]
# Don't modify any code below this comment.
# Notice the variables you'll need to create in order for the code below to
# be functional!
paste("News from", place, "today where", adjective, "students took to the streets in protest of the new", noun, "being installed on campus.")
}
mad_libs <- function(...){
# Do your argument unpacking here!
args <- list(...)
print args
place <- args[[place]]
adjective <- args[[adjective]]
noun <- args[[noun]]
# Don't modify any code below this comment.
# Notice the variables you'll need to create in order for the code below to
# be functional!
paste("News from", place, "today where", adjective, "students took to the streets in protest of the new", noun, "being installed on campus.")
}
mad_libs <- function(...){
args <- list(...)
print args
place <- args[[place]]
adjective <- args[[adjective]]
noun <- args[[noun]]
paste("News from", place, "today where", adjective, "students took to the streets in protest of the new", noun, "being installed on campus.")
}
rnorm(10)
rnorm(20,1)
library(swirl)
rm(list=ls())
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
library(swirl)
rm(list=ls())
swirl()
sapply(flags, unique)
vapply(flags, unique, numeris(1))
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
library(datasets)
data("iris")
?iris
colnames(iris)
head(iris)
unique(iris$Species)
s <- split(iris, iris$Species)
s
class(s)
sapply(s, function(x) { colMeans(x[, "Sepal.Length"])})
lapply(s, mean)
sp <- unique(iris$Species)
sp
class(sp)
tapply(iris$Sepal.Length, sp, mean)
v <- iris$Sepal.Length
v
class(v)
split(iris, sp)
s <- split(iris, sp)
class(s)
tapply(iris$Sepal.Length, iris$Species, mean)
apply(iris, 2, mean)
colMeans(iris)
apply(iris[, 1:4], 1, mean)
apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
?mtcars
head(mtcars)
tapply(mtcars$mpg, mtcars$cyl, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
mean(mtcars$mpg, mtcars$cyl)
tapply(mtcars$cyl, mtcars$mpg, mean)
lapply(mtcars, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
split(mtcars, mtcars$cyl)
tapply(mtcars$mpg, mtcars$cyl, mean)
sapply(mtcars, cyl, mean)
apply(mtcars, 2, mean)
with(mtcars, tapply(mpg, cyl, mean))
tapply(mtcars$mpg, mtcars$cyl, mean)
head(mtcars)
mean_hp <- mean(mtcars$hp)
tapply(mtcars$h, mtcars$cyl, mean)
tapply(mtcars$hp, mtcars$cyl, mean)
mean_hp <- tapply(mtcars$hp, mtcars$cyl, mean)
mean_hp
class(mean_hp)
mean_hp[1,2]
mean_hp(1,2)
class(mean_hp)
mean_hp[c(2,1)]
mean_hp[c(1,1)]
mean_hp[1]
mean_hp[,1]
mean_hp[1,0]
dim(mean_hp)
x <- 1:2
class(x)
x
mean_hp[1]
abs(mean_hp[3] - mean_hp[1])
m <- matrix(1:9, 3, 3)
m
i <- solve(m)
m <- matrix(c(2, 4, -5, 6), 2, 2)
m
solve(m)
source("cachematrix.R")
getwd
getwd()
setwd("..)")
setwd("..")
getwd()
setwd("Desktop/Home/DataScience_JHU/R_Programming/Week3/ProgrammingAssignment2")
source("cachematrix.R")
solve(m)
cacheSolve(m)
makeCacheMatrix(m)
f <- makeCacheMatrix(m)
cacheSolve(f)
solve(m)
m2 <- matrix(c(4, 3, -8, 2, -1, 3, 5, 9, 9), 3, 3)
f <- makeCacheMatrix(m2)
cacheSolve(f)
solve(m2)
cacheSolve(f)
